// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using G4G.Models;

namespace G4G.Data
{
    public partial class G4GContext : DbContext
    {
        public G4GContext()
        {
        }

        public G4GContext(DbContextOptions<G4GContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Content> Content { get; set; }
        public virtual DbSet<SubCategory> SubCategory { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => new { e.IdAccount, e.Username })
                    .HasName("account_pk");

                entity.Property(e => e.IdAccount)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_account");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("password");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.IdCategory)
                    .HasName("category_pk");

                entity.Property(e => e.IdCategory).HasColumnName("id_category");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.HasKey(e => e.IdComment)
                    .HasName("comment_pk");

                entity.Property(e => e.IdComment).HasColumnName("id_comment");

                entity.Property(e => e.AccountIdAccount).HasColumnName("account_id_account");

                entity.Property(e => e.AccountUsername)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("account_username");

                entity.Property(e => e.ContentIdContent).HasColumnName("content_id_content");

                entity.Property(e => e.Posted)
                    .HasColumnType("datetime")
                    .HasColumnName("posted");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("text");

                entity.HasOne(d => d.ContentIdContentNavigation)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.ContentIdContent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("comment_content_fk");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => new { d.AccountIdAccount, d.AccountUsername })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("comment_account_fk");
            });

            modelBuilder.Entity<Content>(entity =>
            {
                entity.HasKey(e => e.IdContent)
                    .HasName("content_pk");

                entity.Property(e => e.IdContent).HasColumnName("id_content");

                entity.Property(e => e.AccountIdAccount).HasColumnName("account_id_account");

                entity.Property(e => e.AccountUsername)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("account_username");

                entity.Property(e => e.Headline)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("headline");

                entity.Property(e => e.Posted)
                    .HasColumnType("datetime")
                    .HasColumnName("posted");

                entity.Property(e => e.SubcategoryIdSubcategory).HasColumnName("subcategory_id_subcategory");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("text");

                entity.Property(e => e.Views).HasColumnName("views");

                entity.HasOne(d => d.SubcategoryIdSubcategoryNavigation)
                    .WithMany(p => p.Content)
                    .HasForeignKey(d => d.SubcategoryIdSubcategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("content_subcategory_fk");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Content)
                    .HasForeignKey(d => new { d.AccountIdAccount, d.AccountUsername })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("content_account_fk");
            });

            modelBuilder.Entity<SubCategory>(entity =>
            {
                entity.HasKey(e => e.IdSubcategory)
                    .HasName("subcategory_pk");

                entity.Property(e => e.IdSubcategory).HasColumnName("id_subcategory");

                entity.Property(e => e.CategoryIdCategory).HasColumnName("category_id_category");

                entity.Property(e => e.Icon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("icon");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.CategoryIdCategoryNavigation)
                    .WithMany(p => p.SubCategory)
                    .HasForeignKey(d => d.CategoryIdCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("subcategory_category_fk");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}